// z-std-pack v0.2.2
// Jakob Mattsson 2014-03-19
// Generated by CommonJS Everywhere 0.9.7
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  require.define('/lib/index.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Z, mixinAll, zBuiltins, zInit, zUnderscore;
      Z = require('/node_modules/z-core/lib/index.js', module);
      zBuiltins = require('/node_modules/z-builtins/lib/index.js', module);
      zUnderscore = require('/node_modules/z-underscore/lib/index.js', module);
      mixinAll = function (z) {
        z.mixin(zBuiltins);
        return z.mixin(zUnderscore);
      };
      zInit = Z.init;
      Z.init = function () {
        var newZ;
        newZ = zInit();
        mixinAll(newZ);
        return newZ;
      };
      mixinAll(Z);
      module.exports = Z;
    }.call(this));
  });
  require.define('/node_modules/z-underscore/lib/index.js', function (module, exports, __dirname, __filename) {
    (function () {
      var eachMethods, methods, _, _ref, __slice = [].slice;
      _ = require('/node_modules/z-underscore/node_modules/underscore/underscore.js', module);
      _ref = require('/node_modules/z-underscore/lib/methods.js', module), methods = _ref.methods, eachMethods = _ref.eachMethods;
      _(eachMethods).each(function (method) {
        return exports[method + 'Each'] = function () {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _(this.value).map(function (e) {
            var _ref1;
            return (_ref1 = _(e))[method].apply(_ref1, args);
          });
        };
      });
      _(methods).each(function (method) {
        return exports[method] = function () {
          var args, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref1 = _(this.value))[method].apply(_ref1, args);
        };
      });
    }.call(this));
  });
  require.define('/node_modules/z-underscore/lib/methods.js', function (module, exports, __dirname, __filename) {
    (function () {
      exports.eachMethods = [
        'omit',
        'pick',
        'keys'
      ];
      exports.methods = [
        'each',
        'forEach',
        'map',
        'collect',
        'reduce',
        'inject',
        'foldl',
        'fold',
        'reduceRight',
        'foldr',
        'find',
        'detect',
        'filter',
        'select',
        'where',
        'findWhere',
        'reject',
        'every',
        'all',
        'some',
        'any',
        'contains',
        'include',
        'invoke',
        'pluck',
        'max',
        'min',
        'sortBy',
        'groupBy',
        'indexBy',
        'countBy',
        'shuffle',
        'sample',
        'toArray',
        'size',
        'first',
        'head',
        'take',
        'initial',
        'last',
        'rest',
        'tail',
        'drop',
        'compact',
        'flatten',
        'without',
        'union',
        'intersection',
        'difference',
        'uniq',
        'unique',
        'zip',
        'object',
        'indexOf',
        'lastIndexOf',
        'sortedIndex',
        'range',
        'bind',
        'bindAll',
        'partial',
        'memoize',
        'delay',
        'defer',
        'throttle',
        'debounce',
        'once',
        'after',
        'wrap',
        'compose',
        'keys',
        'values',
        'pairs',
        'invert',
        'functions',
        'methods',
        'extend',
        'pick',
        'omit',
        'defaults',
        'clone',
        'tap',
        'has',
        'isEqual',
        'isEmpty',
        'isElement',
        'isArray',
        'isObject',
        'isArguments',
        'isFunction',
        'isString',
        'isNumber',
        'isFinite',
        'isBoolean',
        'isDate',
        'isRegExp',
        'isNaN',
        'isNull',
        'isUndefined',
        'identity',
        'times',
        'random',
        'uniqueId',
        'escape',
        'unescape',
        'result',
        'template'
      ];
    }.call(this));
  });
  require.define('/node_modules/z-underscore/node_modules/underscore/underscore.js', function (module, exports, __dirname, __filename) {
    (function () {
      var root = this;
      var previousUnderscore = root._;
      var breaker = {};
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
      var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
      var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
      var _ = function (obj) {
        if (obj instanceof _)
          return obj;
        if (!(this instanceof _))
          return new _(obj);
        this._wrapped = obj;
      };
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
      _.VERSION = '1.6.0';
      var each = _.each = _.forEach = function (obj, iterator, context) {
          if (obj == null)
            return obj;
          if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
          } else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; i < length; i++) {
              if (iterator.call(context, obj[i], i, obj) === breaker)
                return;
            }
          } else {
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
              if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
                return;
            }
          }
          return obj;
        };
      _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null)
          return results;
        if (nativeMap && obj.map === nativeMap)
          return obj.map(iterator, context);
        each(obj, function (value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };
      var reduceError = 'Reduce of empty array with no initial value';
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
          obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context)
            iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function (value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial)
          throw new TypeError(reduceError);
        return memo;
      };
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
          obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context)
            iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function (value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial)
          throw new TypeError(reduceError);
        return memo;
      };
      _.find = _.detect = function (obj, predicate, context) {
        var result;
        any(obj, function (value, index, list) {
          if (predicate.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };
      _.filter = _.select = function (obj, predicate, context) {
        var results = [];
        if (obj == null)
          return results;
        if (nativeFilter && obj.filter === nativeFilter)
          return obj.filter(predicate, context);
        each(obj, function (value, index, list) {
          if (predicate.call(context, value, index, list))
            results.push(value);
        });
        return results;
      };
      _.reject = function (obj, predicate, context) {
        return _.filter(obj, function (value, index, list) {
          return !predicate.call(context, value, index, list);
        }, context);
      };
      _.every = _.all = function (obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = true;
        if (obj == null)
          return result;
        if (nativeEvery && obj.every === nativeEvery)
          return obj.every(predicate, context);
        each(obj, function (value, index, list) {
          if (!(result = result && predicate.call(context, value, index, list)))
            return breaker;
        });
        return !!result;
      };
      var any = _.some = _.any = function (obj, predicate, context) {
          predicate || (predicate = _.identity);
          var result = false;
          if (obj == null)
            return result;
          if (nativeSome && obj.some === nativeSome)
            return obj.some(predicate, context);
          each(obj, function (value, index, list) {
            if (result || (result = predicate.call(context, value, index, list)))
              return breaker;
          });
          return !!result;
        };
      _.contains = _.include = function (obj, target) {
        if (obj == null)
          return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf)
          return obj.indexOf(target) != -1;
        return any(obj, function (value) {
          return value === target;
        });
      };
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };
      _.pluck = function (obj, key) {
        return _.map(obj, _.property(key));
      };
      _.where = function (obj, attrs) {
        return _.filter(obj, _.matches(attrs));
      };
      _.findWhere = function (obj, attrs) {
        return _.find(obj, _.matches(attrs));
      };
      _.max = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        var result = -Infinity, lastComputed = -Infinity;
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          if (computed > lastComputed) {
            result = value;
            lastComputed = computed;
          }
        });
        return result;
      };
      _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        var result = Infinity, lastComputed = Infinity;
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          if (computed < lastComputed) {
            result = value;
            lastComputed = computed;
          }
        });
        return result;
      };
      _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };
      _.sample = function (obj, n, guard) {
        if (n == null || guard) {
          if (obj.length !== +obj.length)
            obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };
      var lookupIterator = function (value) {
        if (value == null)
          return _.identity;
        if (_.isFunction(value))
          return value;
        return _.property(value);
      };
      _.sortBy = function (obj, iterator, context) {
        iterator = lookupIterator(iterator);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0)
              return 1;
            if (a < b || b === void 0)
              return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
      var group = function (behavior) {
        return function (obj, iterator, context) {
          var result = {};
          iterator = lookupIterator(iterator);
          each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };
      _.groupBy = group(function (result, key, value) {
        _.has(result, key) ? result[key].push(value) : result[key] = [value];
      });
      _.indexBy = group(function (result, key, value) {
        result[key] = value;
      });
      _.countBy = group(function (result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });
      _.sortedIndex = function (array, obj, iterator, context) {
        iterator = lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };
      _.toArray = function (obj) {
        if (!obj)
          return [];
        if (_.isArray(obj))
          return slice.call(obj);
        if (obj.length === +obj.length)
          return _.map(obj, _.identity);
        return _.values(obj);
      };
      _.size = function (obj) {
        if (obj == null)
          return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
      };
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[0];
        if (n < 0)
          return [];
        return slice.call(array, 0, n);
      };
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
      };
      _.last = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[array.length - 1];
        return slice.call(array, Math.max(array.length - n, 0));
      };
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };
      var flatten = function (input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function (value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, []);
      };
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };
      _.partition = function (array, predicate) {
        var pass = [], fail = [];
        each(array, function (elem) {
          (predicate(elem) ? pass : fail).push(elem);
        });
        return [
          pass,
          fail
        ];
      };
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };
      _.union = function () {
        return _.uniq(_.flatten(arguments, true));
      };
      _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
          return _.every(rest, function (other) {
            return _.contains(other, item);
          });
        });
      };
      _.difference = function (array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };
      _.zip = function () {
        var length = _.max(_.pluck(arguments, 'length').concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };
      _.object = function (list, values) {
        if (list == null)
          return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
      _.indexOf = function (array, item, isSorted) {
        if (array == null)
          return -1;
        var i = 0, length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf)
          return array.indexOf(item, isSorted);
        for (; i < length; i++)
          if (array[i] === item)
            return i;
        return -1;
      };
      _.lastIndexOf = function (array, item, from) {
        if (array == null)
          return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--)
          if (array[i] === item)
            return i;
        return -1;
      };
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);
        while (idx < length) {
          range[idx++] = start;
          start += step;
        }
        return range;
      };
      var ctor = function () {
      };
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind)
          return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
          throw new TypeError;
        args = slice.call(arguments, 2);
        return bound = function () {
          if (!(this instanceof bound))
            return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor;
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result)
            return result;
          return self;
        };
      };
      _.partial = function (func) {
        var boundArgs = slice.call(arguments, 1);
        return function () {
          var position = 0;
          var args = boundArgs.slice();
          for (var i = 0, length = args.length; i < length; i++) {
            if (args[i] === _)
              args[i] = arguments[position++];
          }
          while (position < arguments.length)
            args.push(arguments[position++]);
          return func.apply(this, args);
        };
      };
      _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0)
          throw new Error('bindAll must be passed function names');
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        });
        return obj;
      };
      _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
      };
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };
      _.defer = function (func) {
        return _.delay.apply(_, [
          func,
          1
        ].concat(slice.call(arguments, 1)));
      };
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function () {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          context = args = null;
        };
        return function () {
          var now = _.now();
          if (!previous && options.leading === false)
            previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
            context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function () {
          var last = _.now() - timestamp;
          if (last < wait) {
            timeout = setTimeout(later, wait - last);
          } else {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
              context = args = null;
            }
          }
        };
        return function () {
          context = this;
          args = arguments;
          timestamp = _.now();
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) {
            result = func.apply(context, args);
            context = args = null;
          }
          return result;
        };
      };
      _.once = function (func) {
        var ran = false, memo;
        return function () {
          if (ran)
            return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };
      _.wrap = function (func, wrapper) {
        return _.partial(wrapper, func);
      };
      _.compose = function () {
        var funcs = arguments;
        return function () {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
      _.keys = function (obj) {
        if (!_.isObject(obj))
          return [];
        if (nativeKeys)
          return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
          if (_.has(obj, key))
            keys.push(key);
        return keys;
      };
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [
            keys[i],
            obj[keys[i]]
          ];
        }
        return pairs;
      };
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key]))
            names.push(key);
        }
        return names.sort();
      };
      _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
      _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
          if (key in obj)
            copy[key] = obj[key];
        });
        return copy;
      };
      _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key))
            copy[key] = obj[key];
        }
        return copy;
      };
      _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0)
                obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
      _.clone = function (obj) {
        if (!_.isObject(obj))
          return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };
      var eq = function (a, b, aStack, bStack) {
        if (a === b)
          return a !== 0 || 1 / a == 1 / b;
        if (a == null || b == null)
          return a === b;
        if (a instanceof _)
          a = a._wrapped;
        if (b instanceof _)
          b = b._wrapped;
        var className = toString.call(a);
        if (className != toString.call(b))
          return false;
        switch (className) {
        case '[object String]':
          return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object')
          return false;
        var length = aStack.length;
        while (length--) {
          if (aStack[length] == a)
            return bStack[length] == b;
        }
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {
          return false;
        }
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        if (className == '[object Array]') {
          size = a.length;
          result = size == b.length;
          if (result) {
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack)))
                break;
            }
          }
        } else {
          for (var key in a) {
            if (_.has(a, key)) {
              size++;
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                break;
            }
          }
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !size--)
                break;
            }
            result = !size;
          }
        }
        aStack.pop();
        bStack.pop();
        return result;
      };
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };
      _.isEmpty = function (obj) {
        if (obj == null)
          return true;
        if (_.isArray(obj) || _.isString(obj))
          return obj.length === 0;
        for (var key in obj)
          if (_.has(obj, key))
            return false;
        return true;
      };
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == '[object Array]';
      };
      _.isObject = function (obj) {
        return obj === Object(obj);
      };
      each([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp'
      ], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj === 'function';
        };
      }
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj;
      };
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };
      _.isNull = function (obj) {
        return obj === null;
      };
      _.isUndefined = function (obj) {
        return obj === void 0;
      };
      _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
      };
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };
      _.identity = function (value) {
        return value;
      };
      _.constant = function (value) {
        return function () {
          return value;
        };
      };
      _.property = function (key) {
        return function (obj) {
          return obj[key];
        };
      };
      _.matches = function (attrs) {
        return function (obj) {
          if (obj === attrs)
            return true;
          for (var key in attrs) {
            if (attrs[key] !== obj[key])
              return false;
          }
          return true;
        };
      };
      _.times = function (n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++)
          accum[i] = iterator.call(context, i);
        return accum;
      };
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
      _.now = Date.now || function () {
        return new Date().getTime();
      };
      var entityMap = {
          escape: {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;'
          }
        };
      entityMap.unescape = _.invert(entityMap.escape);
      var entityRegexes = {
          escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
          unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
        };
      _.each([
        'escape',
        'unescape'
      ], function (method) {
        _[method] = function (string) {
          if (string == null)
            return '';
          return ('' + string).replace(entityRegexes[method], function (match) {
            return entityMap[method][match];
          });
        };
      });
      _.result = function (object, property) {
        if (object == null)
          return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };
      _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
      var noMatch = /(.)^/;
      var escapes = {
          "'": "'",
          '\\': '\\',
          '\r': 'r',
          '\n': 'n',
          '\t': 't',
          '\u2028': 'u2028',
          '\u2029': 'u2029'
        };
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
      _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
          ].join('|') + '|$', 'g');
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, function (match) {
            return '\\' + escapes[match];
          });
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        if (!settings.variable)
          source = 'with(obj||{}){\n' + source + '}\n';
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';
        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
        if (data)
          return render(data, _);
        var template = function (data) {
          return render.call(this, data, _);
        };
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
        return template;
      };
      _.chain = function (obj) {
        return _(obj).chain();
      };
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };
      _.mixin(_);
      each([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0)
            delete obj[0];
          return result.call(this, obj);
        };
      });
      each([
        'concat',
        'join',
        'slice'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });
      _.extend(_.prototype, {
        chain: function () {
          this._chain = true;
          return this;
        },
        value: function () {
          return this._wrapped;
        }
      });
      if (typeof define === 'function' && define.amd) {
        define('underscore', [], function () {
          return _;
        });
      }
    }.call(this));
  });
  require.define('/node_modules/z-builtins/lib/index.js', function (module, exports, __dirname, __filename) {
    (function () {
      var exportArbitraryMethod, exportMethod, exportMutatorMethod, func, global, isArray, logging, method, methods, name, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, __slice = [].slice;
      methods = require('/node_modules/z-builtins/lib/methods.js', module);
      logging = require('/node_modules/z-builtins/lib/logging.js', module);
      isArray = Array.isArray || function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
      global = function () {
        return this;
      }();
      exportMethod = function (method) {
        return exports[method] = function () {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.value[method].apply(this.value, args);
        };
      };
      exportMutatorMethod = function (method) {
        return exports[method] = function () {
          var args, newValue;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (!Array.isArray(this.value)) {
            throw new Error('Must be an array');
          }
          newValue = this.value.slice(0);
          newValue[method].apply(newValue, args);
          return newValue;
        };
      };
      exportArbitraryMethod = function (name, method) {
        return exports[name] = function () {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return method.apply(null, [this.value].concat(__slice.call(args)));
        };
      };
      for (name in logging) {
        func = logging[name];
        exports[name] = func;
      }
      _ref = methods.plain;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        exportMethod(method);
      }
      _ref1 = methods.mutators;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        method = _ref1[_j];
        exportMutatorMethod(method);
      }
      _ref2 = methods.globals;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        method = _ref2[_k];
        exportArbitraryMethod(method, global[method]);
      }
      _ref3 = methods.methods;
      for (name in _ref3) {
        method = _ref3[name];
        exportArbitraryMethod(name, method);
      }
      _ref4 = methods.maths;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        method = _ref4[_l];
        exportArbitraryMethod(method, Math[method]);
      }
      exports.length = function () {
        if (typeof this.value !== 'string' && !isArray(this.value)) {
          throw new Error('Function "length" can only be called on strings and arrays');
        }
        return this.value.length;
      };
      exports.get = function (property) {
        return this.value[property];
      };
      exports.toStr = function () {
        return this.value.toString();
      };
      exports['if'] = function (f1, f2) {
        if (this.value) {
          return f1();
        } else if (f2) {
          return f2();
        }
      };
    }.call(this));
  });
  require.define('/node_modules/z-builtins/lib/logging.js', function (module, exports, __dirname, __filename) {
    (function () {
      var log;
      log = function (value) {
        if ((typeof console !== 'undefined' && console !== null ? console.log : void 0) != null) {
          return console.log(value);
        }
      };
      exports.log = function () {
        return log(this.value);
      };
      exports.print = function () {
        var util, v;
        util = require('util', module);
        v = util.inspect(this.value, { depth: null });
        return log(JSON.stringify(this.value));
      };
    }.call(this));
  });
  require.define('util', function (module, exports, __dirname, __filename) {
    (function () {
      exports.inspect = function (value) {
        return JSON.stringify(value);
      };
    }.call(this));
  });
  require.define('/node_modules/z-builtins/lib/methods.js', function (module, exports, __dirname, __filename) {
    (function () {
      exports.plain = [
        'charAt',
        'charCodeAt',
        'concat',
        'indexOf',
        'lastIndexOf',
        'localeCompare',
        'match',
        'replace',
        'search',
        'slice',
        'split',
        'substr',
        'substring',
        'toLocaleLowerCase',
        'toLocaleUpperCase',
        'toLowerCase',
        'toUpperCase',
        'trim',
        'concat',
        'join',
        'slice',
        'indexOf',
        'lastIndexOf',
        'forEach',
        'every',
        'some',
        'filter',
        'map',
        'reduce',
        'reduceRight',
        'toLocaleString',
        'apply',
        'bind',
        'call',
        'toExponential',
        'toFixed',
        'toLocaleString',
        'toPrecision',
        'exec',
        'test'
      ];
      exports.mutators = [
        'reverse',
        'sort',
        'pop',
        'shift',
        'push',
        'splice',
        'unshift'
      ];
      exports.globals = [
        'eval',
        'isFinite',
        'isNaN',
        'parseFloat',
        'parseInt',
        'decodeURI',
        'decodeURIComponent',
        'encodeURI',
        'encodeURIComponent',
        'escape',
        'unescape'
      ];
      exports.methods = {
        isArray: Array.isArray,
        stringify: JSON.stringify,
        parseJSON: JSON.parse,
        logarithm: Math.log,
        inc: function (x) {
          return x + 1;
        },
        dec: function (x) {
          return x - 1;
        },
        neg: function (x) {
          return -x;
        },
        'typeof': function (x) {
          return typeof x;
        },
        del: function (x, name) {
          delete x[name];
          return x;
        },
        'in': function (prop, obj) {
          return prop in obj;
        },
        'instanceof': function (obj, type) {
          return obj instanceof type;
        },
        mult: function (x, y) {
          return x * y;
        },
        div: function (x, y) {
          return x / y;
        },
        mod: function (x, y) {
          return x % y;
        },
        add: function (x, y) {
          return x + y;
        },
        sub: function (x, y) {
          return x - y;
        },
        bitNot: function (x) {
          return ~x;
        },
        bitAnd: function (x, y) {
          return x & y;
        },
        bitOr: function (x, y) {
          return x | y;
        },
        bitLeft: function (x, y) {
          return x << y;
        },
        bitRight: function (x, y) {
          return x >> y;
        },
        bitRightFill: function (x, y) {
          return x >>> y;
        },
        gt: function (x, y) {
          return x > y;
        },
        gte: function (x, y) {
          return x >= y;
        },
        lt: function (x, y) {
          return x < y;
        },
        lte: function (x, y) {
          return x <= y;
        },
        and: function (x, y) {
          return x && y;
        },
        or: function (x, y) {
          return x || y;
        },
        not: function (x) {
          return !x;
        }
      };
      exports.maths = [
        'abs',
        'acos',
        'asin',
        'atan',
        'atan2',
        'ceil',
        'cos',
        'exp',
        'floor',
        'max',
        'min',
        'pow',
        'round',
        'sin',
        'sqrt',
        'tan'
      ];
    }.call(this));
  });
  require.define('/node_modules/z-core/lib/index.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Promise, init, isArray, isPrimitive, keys, makeZ, object, objectCreate, pairs, proc, resolveAll, resolveCompletely, tools, values, __slice = [].slice;
      tools = require('/node_modules/z-core/lib/tools.js', module);
      Promise = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/main.js', module).Promise;
      pairs = tools.pairs, keys = tools.keys, values = tools.values, object = tools.object, resolveAll = tools.resolveAll, isPrimitive = tools.isPrimitive, isArray = tools.isArray, objectCreate = tools.objectCreate, proc = tools.proc;
      resolveCompletely = function (unresolved, depth) {
        return resolveAll([unresolved]).then(function (_arg) {
          var resolved, unresolvedValues;
          resolved = _arg[0];
          if (depth <= 0 || resolved == null || isPrimitive(resolved)) {
            return resolved;
          }
          if (isArray(resolved)) {
            return resolveAll(resolved.map(function (x) {
              return resolveCompletely(x, depth - 1);
            }));
          }
          unresolvedValues = resolveAll(values(resolved).map(function (x) {
            return resolveCompletely(x, depth - 1);
          }));
          return unresolvedValues.then(function (resolvedValues) {
            return object(keys(resolved), resolvedValues);
          });
        });
      };
      init = function (defaultConf) {
        var Z, mixedIn, mixinObj, updateMixinObj;
        mixedIn = {};
        mixinObj = {};
        updateMixinObj = function () {
          return pairs(mixedIn).forEach(function (_arg) {
            var func, name;
            name = _arg[0], func = _arg[1];
            return mixinObj[name] = function () {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return this.then(function (resolved) {
                return resolveCompletely(args, 1).then(function (args) {
                  return func.apply({ value: resolved }, args);
                });
              });
            };
          });
        };
        Z = function (obj, conf) {
          var key, overrideLayer, resolvedObject, resultingPromise, value, _ref;
          conf = (_ref = conf != null ? conf : defaultConf) != null ? _ref : {};
          if (typeof conf.depth === 'undefined') {
            conf.depth = 1;
          }
          if (conf.depth === null) {
            conf.depth = 1e6;
          }
          resolvedObject = resolveCompletely(obj, conf.depth);
          overrideLayer = objectCreate(resolvedObject);
          resultingPromise = objectCreate(overrideLayer);
          overrideLayer.then = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Z(resolvedObject.then.apply(resolvedObject, args));
          };
          for (key in mixinObj) {
            value = mixinObj[key];
            resultingPromise[key] = value;
          }
          return resultingPromise;
        };
        Z.mixin = proc(function (hash) {
          pairs(hash).forEach(function (_arg) {
            var func, name, oldOne;
            name = _arg[0], func = _arg[1];
            oldOne = mixedIn[name];
            return mixedIn[name] = function () {
              var context;
              context = { value: this.value };
              if (oldOne) {
                context.base = oldOne;
              }
              return func.apply(context, arguments);
            };
          });
          return updateMixinObj();
        });
        Z.bindSync = function (func, context) {
          return function () {
            var unresolvedArgs;
            unresolvedArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Z(unresolvedArgs).then(function (_this) {
              return function (args) {
                return func.apply(context != null ? context : _this, args);
              };
            }(this));
          };
        };
        Z.bindAsync = function (func, context) {
          return function () {
            var ctx, unresolvedArgs;
            unresolvedArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            ctx = context != null ? context : this;
            return Z(unresolvedArgs).then(function (args) {
              return new Promise(function (resolve, reject) {
                var ex;
                args.push(function () {
                  var err, result;
                  err = arguments[0], result = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                  if (err != null) {
                    return reject(err);
                  } else if (result.length === 1) {
                    return resolve(result[0]);
                  } else {
                    return resolve(result);
                  }
                });
                try {
                  return func.apply(ctx, args);
                } catch (_error) {
                  ex = _error;
                  return reject(ex);
                }
              });
            });
          };
        };
        return Z;
      };
      makeZ = function () {
        var Z;
        Z = init();
        Z.init = init;
        return Z;
      };
      if (typeof window !== 'undefined' && typeof window.require === 'undefined') {
        window.Z = makeZ();
      }
      if (typeof module !== 'undefined') {
        module.exports = makeZ();
      }
    }.call(this));
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/main.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var Promise = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/promise.js', module).Promise;
    var polyfill = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/polyfill.js', module).polyfill;
    exports.Promise = Promise;
    exports.polyfill = polyfill;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/polyfill.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var RSVPPromise = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/promise.js', module).Promise;
    var isFunction = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).isFunction;
    function polyfill() {
      var es6PromiseSupport = 'Promise' in window && 'cast' in window.Promise && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise && function () {
          var resolve;
          new window.Promise(function (r) {
            resolve = r;
          });
          return isFunction(resolve);
        }();
      if (!es6PromiseSupport) {
        window.Promise = RSVPPromise;
      }
    }
    exports.polyfill = polyfill;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', function (module, exports, __dirname, __filename) {
    'use strict';
    function objectOrFunction(x) {
      return isFunction(x) || typeof x === 'object' && x !== null;
    }
    function isFunction(x) {
      return typeof x === 'function';
    }
    function isArray(x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    }
    var now = Date.now || function () {
        return new Date().getTime();
      };
    exports.objectOrFunction = objectOrFunction;
    exports.isFunction = isFunction;
    exports.isArray = isArray;
    exports.now = now;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/promise.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var config = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/config.js', module).config;
    var configure = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/config.js', module).configure;
    var objectOrFunction = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).objectOrFunction;
    var isFunction = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).isFunction;
    var now = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).now;
    var cast = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/cast.js', module).cast;
    var all = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/all.js', module).all;
    var race = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/race.js', module).race;
    var staticResolve = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/resolve.js', module).resolve;
    var staticReject = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/reject.js', module).reject;
    var asap = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/asap.js', module).asap;
    var counter = 0;
    config.async = asap;
    function Promise(resolver) {
      if (!isFunction(resolver)) {
        throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
      }
      if (!(this instanceof Promise)) {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
      }
      this._subscribers = [];
      invokeResolver(resolver, this);
    }
    function invokeResolver(resolver, promise) {
      function resolvePromise(value) {
        resolve(promise, value);
      }
      function rejectPromise(reason) {
        reject(promise, reason);
      }
      try {
        resolver(resolvePromise, rejectPromise);
      } catch (e) {
        rejectPromise(e);
      }
    }
    function invokeCallback(settled, promise, callback, detail) {
      var hasCallback = isFunction(callback), value, error, succeeded, failed;
      if (hasCallback) {
        try {
          value = callback(detail);
          succeeded = true;
        } catch (e) {
          failed = true;
          error = e;
        }
      } else {
        value = detail;
        succeeded = true;
      }
      if (handleThenable(promise, value)) {
        return;
      } else if (hasCallback && succeeded) {
        resolve(promise, value);
      } else if (failed) {
        reject(promise, error);
      } else if (settled === FULFILLED) {
        resolve(promise, value);
      } else if (settled === REJECTED) {
        reject(promise, value);
      }
    }
    var PENDING = void 0;
    var SEALED = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    function subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;
      subscribers[length] = child;
      subscribers[length + FULFILLED] = onFulfillment;
      subscribers[length + REJECTED] = onRejection;
    }
    function publish(promise, settled) {
      var child, callback, subscribers = promise._subscribers, detail = promise._detail;
      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];
        invokeCallback(settled, child, callback, detail);
      }
      promise._subscribers = null;
    }
    Promise.prototype = {
      constructor: Promise,
      _state: undefined,
      _detail: undefined,
      _subscribers: undefined,
      then: function (onFulfillment, onRejection) {
        var promise = this;
        var thenPromise = new this.constructor(function () {
          });
        if (this._state) {
          var callbacks = arguments;
          config.async(function invokePromiseCallback() {
            invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
          });
        } else {
          subscribe(this, thenPromise, onFulfillment, onRejection);
        }
        return thenPromise;
      },
      'catch': function (onRejection) {
        return this.then(null, onRejection);
      }
    };
    Promise.all = all;
    Promise.cast = cast;
    Promise.race = race;
    Promise.resolve = staticResolve;
    Promise.reject = staticReject;
    function handleThenable(promise, value) {
      var then = null, resolved;
      try {
        if (promise === value) {
          throw new TypeError('A promises callback cannot return that same promise.');
        }
        if (objectOrFunction(value)) {
          then = value.then;
          if (isFunction(then)) {
            then.call(value, function (val) {
              if (resolved) {
                return true;
              }
              resolved = true;
              if (value !== val) {
                resolve(promise, val);
              } else {
                fulfill(promise, val);
              }
            }, function (val) {
              if (resolved) {
                return true;
              }
              resolved = true;
              reject(promise, val);
            });
            return true;
          }
        }
      } catch (error) {
        if (resolved) {
          return true;
        }
        reject(promise, error);
        return true;
      }
      return false;
    }
    function resolve(promise, value) {
      if (promise === value) {
        fulfill(promise, value);
      } else if (!handleThenable(promise, value)) {
        fulfill(promise, value);
      }
    }
    function fulfill(promise, value) {
      if (promise._state !== PENDING) {
        return;
      }
      promise._state = SEALED;
      promise._detail = value;
      config.async(publishFulfillment, promise);
    }
    function reject(promise, reason) {
      if (promise._state !== PENDING) {
        return;
      }
      promise._state = SEALED;
      promise._detail = reason;
      config.async(publishRejection, promise);
    }
    function publishFulfillment(promise) {
      publish(promise, promise._state = FULFILLED);
    }
    function publishRejection(promise) {
      publish(promise, promise._state = REJECTED);
    }
    exports.Promise = Promise;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/asap.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var browserGlobal = typeof window !== 'undefined' ? window : {};
    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
    var local = typeof global !== 'undefined' ? global : this;
    function useNextTick() {
      return function () {
        process.nextTick(flush);
      };
    }
    function useMutationObserver() {
      var iterations = 0;
      var observer = new BrowserMutationObserver(flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });
      return function () {
        node.data = iterations = ++iterations % 2;
      };
    }
    function useSetTimeout() {
      return function () {
        local.setTimeout(flush, 1);
      };
    }
    var queue = [];
    function flush() {
      for (var i = 0; i < queue.length; i++) {
        var tuple = queue[i];
        var callback = tuple[0], arg = tuple[1];
        callback(arg);
      }
      queue = [];
    }
    var scheduleFlush;
    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      scheduleFlush = useNextTick();
    } else if (BrowserMutationObserver) {
      scheduleFlush = useMutationObserver();
    } else {
      scheduleFlush = useSetTimeout();
    }
    function asap(callback, arg) {
      var length = queue.push([
          callback,
          arg
        ]);
      if (length === 1) {
        scheduleFlush();
      }
    }
    exports.asap = asap;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/reject.js', function (module, exports, __dirname, __filename) {
    'use strict';
    function reject(reason) {
      var Promise = this;
      return new Promise(function (resolve, reject) {
        reject(reason);
      });
    }
    exports.reject = reject;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/resolve.js', function (module, exports, __dirname, __filename) {
    'use strict';
    function resolve(value) {
      var Promise = this;
      return new Promise(function (resolve, reject) {
        resolve(value);
      });
    }
    exports.resolve = resolve;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/race.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var isArray = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).isArray;
    function race(promises) {
      var Promise = this;
      if (!isArray(promises)) {
        throw new TypeError('You must pass an array to race.');
      }
      return new Promise(function (resolve, reject) {
        var results = [], promise;
        for (var i = 0; i < promises.length; i++) {
          promise = promises[i];
          if (promise && typeof promise.then === 'function') {
            promise.then(resolve, reject);
          } else {
            resolve(promise);
          }
        }
      });
    }
    exports.race = race;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/all.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var isArray = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).isArray;
    var isFunction = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/utils.js', module).isFunction;
    function all(promises) {
      var Promise = this;
      if (!isArray(promises)) {
        throw new TypeError('You must pass an array to all.');
      }
      return new Promise(function (resolve, reject) {
        var results = [], remaining = promises.length, promise;
        if (remaining === 0) {
          resolve([]);
        }
        function resolver(index) {
          return function (value) {
            resolveAll(index, value);
          };
        }
        function resolveAll(index, value) {
          results[index] = value;
          if (--remaining === 0) {
            resolve(results);
          }
        }
        for (var i = 0; i < promises.length; i++) {
          promise = promises[i];
          if (promise && isFunction(promise.then)) {
            promise.then(resolver(i), reject);
          } else {
            resolveAll(i, promise);
          }
        }
      });
    }
    exports.all = all;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/cast.js', function (module, exports, __dirname, __filename) {
    'use strict';
    function cast(object) {
      if (object && typeof object === 'object' && object.constructor === this) {
        return object;
      }
      var Promise = this;
      return new Promise(function (resolve) {
        resolve(object);
      });
    }
    exports.cast = cast;
  });
  require.define('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/promise/config.js', function (module, exports, __dirname, __filename) {
    'use strict';
    var config = { instrument: false };
    function configure(name, value) {
      if (arguments.length === 2) {
        config[name] = value;
      } else {
        return config[name];
      }
    }
    exports.config = config;
    exports.configure = configure;
  });
  require.define('/node_modules/z-core/lib/tools.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Promise, __hasProp = {}.hasOwnProperty;
      Promise = require('/node_modules/z-core/node_modules/es6-promise/dist/commonjs/main.js', module).Promise;
      exports.pairs = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push([
            key,
            value
          ]);
        }
        return _results;
      };
      exports.keys = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push(key);
        }
        return _results;
      };
      exports.values = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push(value);
        }
        return _results;
      };
      exports.object = function (keys, values) {
        var i, key, out, _i, _len;
        out = {};
        for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
          key = keys[i];
          out[key] = values[i];
        }
        return out;
      };
      exports.resolveAll = function (list) {
        return Promise.all(list);
      };
      exports.isPrimitive = function (obj) {
        var types;
        types = [
          'Function',
          'String',
          'Number',
          'Date',
          'RegExp',
          'Boolean'
        ];
        if (obj === true || obj === false) {
          return true;
        }
        return types.some(function (type) {
          return Object.prototype.toString.call(obj) === '[object ' + type + ']';
        });
      };
      exports.isArray = Array.isArray || function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
      exports.objectCreate = Object.create || function (obj) {
        var F;
        F = function () {
        };
        F.prototype = obj;
        return new F;
      };
      exports.proc = function (f) {
        return function () {
          f.apply(this, arguments);
          return void 0;
        };
      };
    }.call(this));
  });
  global.Z = require('/lib/index.js');
}.call(this, this));
